import numpy as np

# Sample input: replace this with your own data
data = [
    [1474603785.119, 1474603785.525, 0.0627450980392156, 0.406, -0.12, 0.286, -0.021],
    [1474603785.405, 1474603785.504, 0.2862745098039215, 0.099, -0.06, 0.039, 0.024],
    [1474603785.444, 1474603785.528, 0.03137254901960784, 0.084, -0.045, 0.039, 0.075],
    [1474603785.483, 1474603785.604, 0.2862745098039215, 0.121, -0.022, 0.099, 0.046],
    [1474603785.582, 1474603785.65, 0.1254901960784313, 0.068, 0.09, 0.158, 0.2],
    [1474603785.74, 1474603785.85, 0.2666666666666666, 0.11, 0.007, 0.117, 0.091],
    [1474603785.857, 1474603785.941, 0.3098039215686274, 0.084, -0.075, 0.009, 0.117],
    [1474603785.866, 1474603786.058, 0.03137254901960784, 0.192, -0.095, 0.097, 0.051],
    [1474603785.964, 1474603786.11, 0.3098039215686274, 0.146, -0.094, 0.052, -0.027],
    [1474603786.016, 1474603786.083, 0.3058823529411765, 0.067, 0.38, 0.447, 0.468],
    [1474603786.463, 1474603786.551, 0.8705882352941177, 0.088, 0.144, 0.232, 0.236],
    [1474603786.695, 1474603786.787, 0.3294117647058823, 0.092, 0.034, 0.126, 0.123],
    [1474603786.821, 1474603786.91, 0.1254901960784313, 0.089, 0.123, 0.212, 0.201],
    [1474603787.033, 1474603787.111, 0.3294117647058823, 0.078, 0.084, 0.162, 0.159],
    [1474603787.195, 1474603787.27, 0.2823529411764706, 0.075, 0.253, 0.328, 0.351],
    [1474603787.523, 1474603787.621, 0.2862745098039215, 0.098, 0.073, 0.171, 0.148],
    [1474603787.694, 1474603787.769, 0.3058823529411765, 0.075, 1.653, 1.728, 1.72],
    [1474603789.422, 1474603789.489, 0.2941176470588235, 0.067, 0.102, 0.169, 0.182],
    [1474603789.591, 1474603789.671, 0.1254901960784313, 0.08, 0.036, 0.116, 0.144],
    [1474603789.707, 1474603789.815, 0.2549019607843137, 0.108, -0.026, 0.082, 0.031],
    [1474603789.789, 1474603789.846, 0.3058823529411765, 0.057, 0.141, 0.198, 0.218],
    [1474603789.987, 1474603790.064, 0.3490196078431372, 0.077, 0.076, 0.153, 0.141],
    [1474603790.14, 1474603790.205, 0.1254901960784313, 0.065, 0.178, 0.243, 0.281],
    [1474603790.383, 1474603790.486, 0.2627450980392157, 0.103, -0.079, 0.024, 0.016],
    [1474603790.407, 1474603790.502, 0.03137254901960784, 0.095, -0.066, 0.029, 0.037],
    [1474603790.436, 1474603790.539, 0.2627450980392157, 0.103, 0.057, 0.16, 0.168],
    [1474603790.596, 1474603790.707, 0.3098039215686274, 0.111, 0.152, 0.263, 0.233],
    [1474603790.859, 1474603790.94, 0.3333333333333333, 0.081, 0.103, 0.184, 0.187],
    [1474603791.043, 1474603791.127, 0.3058823529411765, 0.084, 0.133, 0.217, 0.214],
    [1474603791.26, 1474603791.341, 0.3294117647058823, 0.081, 0.302, 0.383, 0.395],
    [1474603791.643, 1474603791.736, 0.3215686274509804, 0.093, 0.049, 0.142, 0.116],
    [1474603791.785, 1474603791.852, 0.3490196078431372, 0.067, 0.095, 0.162, 0.177],
    [1474603791.947, 1474603792.029, 0.1254901960784313, 0.082, 0.185, 0.267, 0.281],
    [1474603792.214, 1474603792.31, 0.2549019607843137, 0.096, 0.276, 0.372, 0.369],
    [1474603792.586, 1474603792.679, 0.0313725490196078, 0.093, 0.018, 0.111, 0.117],
    [1474603792.697, 1474603792.796, 0.3411764705882353, 0.099, 0.101, 0.2, 0.168],
    [1474603792.897, 1474603792.964, 0.2549019607843137, 0.067, 0.101, 0.168, 0.189],
    [1474603793.065, 1474603793.153, 0.3058823529411765, 0.088, 0.132, 0.22, 0.182],
    [1474603793.285, 1474603793.335, 0.3294117647058823, 0.05, -0.039, 0.011, 0.075],
    [1474603793.296, 1474603793.41, 0.03137254901960784, 0.114, -0.062, 0.052, -0.013],
    [1474603793.348, 1474603793.397, 0.3254901960784314, 0.049, -0.021, 0.028, 0.085],
    [1474603793.376, 1474603793.482, 0.3294117647058823, 0.107, 0.998, 1.104, 1.079],
    [1474603794.48, 1474603794.561, 0.1254901960784313, 0.081, 0.419, 0.5, 0.493],
    [1474603794.98, 1474603795.054, 0.3294117647058823, 0.074, 0.187, 0.261, 0.304],
    [1474603795.241, 1474603795.358, 0.3098039215686274, 0.117, 0.102, 0.219, 0.161],
    [1474603795.46, 1474603795.519, 0.1254901960784313, 0.059, 0.105, 0.164, 0.224],
    [1474603795.624, 1474603795.743, 0.3254901960784314, 0.119, 0.158, 0.277, 0.221],
    [1474603795.901, 1474603795.964, 0.3294117647058823, 0.063, 0.129, 0.192, 0.238],
    [1474603796.093, 1474603796.202, 0.2705882352941176, 0.109, 0.15, 0.259, 0.242],
    [1474603796.352, 1474603796.444, 0.3137254901960784, 0.092, -0.081, 0.011, 0.023],
    [1474603796.363, 1474603796.467, 0.03137254901960784, 0.104, -0.05, 0.053, 0.052],
    [1474603796.417, 1474603796.519, 0.3137254901960784, 0.102, 0.04, 0.142, 0.112],
    [1474603796.559, 1474603796.631, 0.1254901960784313, 0.072, 0.157, 0.229, 0.235],
    [1474603796.788, 1474603796.866, 0.3098039215686274, 0.078, 0.367, 0.445, 0.455],
    [1474603797.233, 1474603797.321, 0.3333333333333333, 0.088, 0.138, 0.226, 0.211],
    [1474603797.459, 1474603797.532, 0.3294117647058823, 0.073, 0.09, 0.163, 0.154],
    [1474603797.622, 1474603797.686, 0.1254901960784313, 0.064, 0.041, 0.105, 0.176],
    [1474603797.727, 1474603797.862, 0.2549019607843137, 0.135, 0.171, 0.306, 0.237],
    [1474603798.033, 1474603798.099, 0.2823529411764706, 0.066, 0.15, 0.216, 0.262],
    [1474603798.249, 1474603798.361, 0.2705882352941176, 0.112, 0.108, 0.22, 0.199],
    [1474603798.469, 1474603798.56, 0.2549019607843137, 0.091, 0.574, 0.665, 0.683],
    [1474603799.134, 1474603799.243, 0.2666666666666666, 0.109, 0.012, 0.121, 0.077],
    [1474603799.255, 1474603799.32, 0.1254901960784313, 0.065, 0.143, 0.208, 0.239],
    [1474603799.463, 1474603799.559, 0.2549019607843137, 0.096, 0.116, 0.212, 0.203],
    [1474603799.675, 1474603799.762, 0.3058823529411765, 0.087, 0.108, 0.195, 0.203],
    [1474603799.87, 1474603799.965, 0.2666666666666666, 0.095, 0.039, 0.134, 0.107],
    [1474603800.004, 1474603800.072, 0.1254901960784313, 0.068, 0.212, 0.28, 0.279],
    [1474603800.284, 1474603800.351, 0.3294117647058823, 0.067, 0.026, 0.093, 0.134],
    [1474603800.377, 1474603800.485, 0.2549019607843137, 0.108, 0.133, 0.241, 0.219],
    [1474603800.618, 1474603800.704, 0.2941176470588235, 0.086, 0.0, 0.0, 0.0]
]


# JavaScript keycode to character map (basic printable)
keycode_map = {
    **{i: chr(i) for i in range(65, 91)},   # A-Z
    **{i: chr(i) for i in range(48, 58)},   # 0-9
    32: " ",
    13: "\n",
    222: "'",
    186: ";",
    188: ",",
    190: ".",
    191: "/",
    219: "[",
    221: "]",
    189: "-",
    187: "=",
    220: "\\",
    192: "`"
}

# Output string
typed_output = ''
shift_pressed = False

# Loop through all key events
for row in data:
    norm_kc = row[2]
    keycode = round(norm_kc * 255)

    if keycode == 16:  # Shift key
        shift_pressed = True
        continue

    # Get character if known, else [keycode]
    char = keycode_map.get(keycode, f'[{keycode}]')

    # If it's a letter, apply casing
    if char.isalpha():
        char = char.upper() if shift_pressed else char.lower()

    # Add to output
    typed_output += char

    # Reset shift after one use
    shift_pressed = False

# Show final typed output
print(typed_output)